AMRNode	amr_graph.py	/^                curr_node = AMRNode(self)$/
DEFINE_string	fragment_forest.py	/^gflags.DEFINE_string($/
append	amr.py	/^    self.nodes.append(node_value)$/
bitarray	amr_fragment.py	/^        self.edges = bitarray(n_edges)$/
compile	identify_entity.py	/^    pattern = re.compile('\\[([^\\[\\]]+)\\]')$/
count	amr_fragment.py	/^        return self.edges.count()$/
defaultdict	categorize_amr.py	/^    frag2map = defaultdict(set)$/
extractNodeMapping	categorize_amr.py	/^            (opt_toks, role_toks, node_to_span, ed/
for	categorize_amr.py	/^    for (node_index, aligned_spans) in all_alignme/
get_child	amr_graph.py	/^            id, n = self.get_child(i)$/
group	constants.py	/^                        relation = match.group(1)$/
initialize	amr_graph.py	/^            self.initialize()$/
insert	amr_graph.py	/^                result.insert(0,prn_n1[n2][0])$/
len	collapse_amr.py	/^            tok_seq2cate_tok_seq_index_map[(tok_in/
lower	date_extraction.py	/^        lower_tok = tok.lower()$/
node_str	amr_graph.py	/^        curr_str = self.node_str()$/
open	amr_utils.py	/^    f = open(amr_file, 'r')$/
pop	amr_graph.py	/^            cur = queue.pop(0)$/
return	amr_graph.py	/^            return ('n', self.root)$/
set	amr_graph.py	/^        visited = set()$/
sorted	categorize_amr.py	/^        span_list = sorted(span_list, key=lambda x/
split	date_extraction.py	/^            fields = line.strip().split(' #### ')$/
str	amr.py	/^      var_map_dict[self.nodes[i]]=prefix+str(i)$/
write	logger.py	/^    file.write("%s\\n" % s)$/
